{"name":"BadgeR","tagline":"Achievement engine with annotation support","body":"# BadgeR achievement engine ![Image of BadgeR](https://dl.dropboxusercontent.com/u/6057082/BagdeR_icon.png)\r\n\r\n[![Build Status](https://travis-ci.org/csongradyp/badgeR.svg)](https://travis-ci.org/csongradyp/badgeR)\r\n[![Coverage Status](https://coveralls.io/repos/csongradyp/badgeR/badge.svg?branch=master)](https://coveralls.io/r/csongradyp/badgeR?branch=master)\r\n\r\n#### *Keep the codebase clean by separating achievement handling from your code.* ####\r\n\r\n* You can separate achievement operations from production code with annotations\r\n* It needs only one \\*.json or \\*.ini file for achievement declaration\r\n* Supports internationalization (i18n)\r\n\r\n## Features ##\r\n\r\n#### 1. Annotation support ####\r\n\r\nYou can avoid mixing the achievement related codes with the real functional codes.\r\n\r\n|Annotation|Function|\r\n|:-----|:-----|\r\n|`@AchievementEventTrigger`|Triggers a defined event by incrementing the event counter by one and checks for possible unlocked achievements|\r\n|`@AchievementScore`|Triggers a defined event by setting the event counter by the given score and checks for possible unlocked achievements|\r\n|`@AchievementUnlock`|Unlock achievement manually|\r\n|`@AchievementCheck`|Checks for possible unlocked achievements|\r\n\r\n#### 2. Easy achievement declaration ####\r\n\r\nAchievements can be given with a single **\\*.ini** or **\\*.json** file.\r\nThere are only few conventions to follow:\r\n\r\n1. Achievements should have a unique id\r\n2. Achievements should belong to one type\r\n\r\n##### 2.1 Json definition #####\r\n\r\n[Define achievement in JSon format](JSON.md)\r\n\r\n##### 2.1 Ini definition #####\r\n\r\n[Define achievement in Ini format](INI.md)\r\n\r\n\r\nAchievement properties:\r\n* id\r\n* subscription\r\n* trigger\r\n* category\r\n\r\nThere are 6 predefined achievement types which can be used to define a the unlock behavior of the achievement:\r\n\r\n|Type|Description|\r\n|:------------:|:-----|\r\n|**single**    |Achievement with no triggers, can be unlocked only directly.|\r\n|**score**     |Unlocked when one of the subscribed event counter scores are meeting trigger requirements|\r\n|**scoreRange**|Unlocked when one of the subscribed event counter scores are within defined score range|\r\n|**date**      |Unlocked when one of the given events are triggered one of the given days|\r\n|**time**      |Unlocked when one of the given events are triggered within the given minutes|\r\n|**timeRange** |Unlocked when one of the given events are triggered within the given time ranges|\r\n\r\n#### 3. Get notified of unlocked achievements or updated events ####\r\n\r\nBadger will notify every time when an achievement is unlocked or an  event counter is updated.\r\n\r\nTo subscribe just implement a handler and pass is to Badger. See more at usage section.\r\n\r\n# Usage #\r\n\r\n## 1.  Achievement definition ##\r\n\r\nAchievement can be defined in two formats: JSON or INI.\r\n\r\n## 2. Internationalization, localization (i18n) ##\r\n\r\nThere is an option to get i18n messages for unlocked achievements. Just create the i18n message \\*.properties and give the base name to Badger.\r\nFor i18n message properties files find some examples [here](https://docs.oracle.com/javase/tutorial/i18n/intro/steps.html)\r\n\r\n#### 2.1 localization keys ####\r\nTo let BangeR give you the resolved messages in the achievement information you should follow the following naming convention:\r\n\r\n* Achievement title key is: ***[ID]*.title**\r\n* Achievement description key is: ***[ID]*.text**\r\n\r\nBadgeR's locale can be changed at any time or just let it to use the default locale of your JVM.\r\n\r\nWithout adding i18n basename Badger will pass the keys as value.\r\n\r\n## 3. Wire into code ##\r\n\r\n#### 3.1 Instantiate BadgeR ####\r\nCreate only **one instance** of BadgeR!\r\n\r\nCreate BadgeR with definition file 'achievements.json' and i18n messages properties files starting with achievementsMsg (e.g.: achievementsMsg_en.properties):\r\n\r\n```java\r\nfinal InputStream inStream = getClass().getClassLoader().getResourceAsStream(\"achievements.ini\");\r\nfinal Badger badger = new Badger(inStream, \"achievementsMsg\");\r\n```\r\n\r\nOr just with the definition file:\r\n```java\r\nfinal Badger badger = new Badger(\"relative/path/to/definition/achievements.json\");\r\n```\r\n\r\n#### 3.2 Subscribe for BadgeR events ####\r\n\r\nSubscribe for unlock events with a simple callback method.\r\n\r\n```java\r\nbadger.subscribeOnUnlock(new IAchievementUnlockedHandler() {\r\n    @Override\r\n    public void onUnlocked(final AchievementUnlockedEvent unlockEvent) {\r\n        final String title = unlockEvent.getTitle(); // localized title\r\n        final String text = unlockEvent.getText();  // localized description\r\n        final Integer level = unlockEvent.getLevel(); // unlocked level\r\n        final Date acquireDate = unlockEvent.getAcquireDate(); // unlock time stamp\r\n        final String triggerValue = unlockEvent.getTriggerValue(); // submitted value which unlocked the achievement\r\n\r\n        // show achievement notification\r\n    }\r\n});\r\n\r\nbadger.subscribeOnUnlock(new IScoreUpdateHandler() {\r\n    @Override\r\n    public void onUnlocked(final ScoreUpdatedEvent scoreUpdatedEvent) {\r\n        final String event = unlockEvent.getEvent(); // event name\r\n        final String newValue = unlockEvent.getValue();  // new value of event counter\r\n        \r\n        // update something ...\r\n    }\r\n});\r\n```\r\n\r\nwith lambda expression\r\n\r\n```java\r\nbadger.subscribeOnUnlock(unlockEvent -> {\r\n    // show achievement notification\r\n} );\r\n\r\nbadger.subscribeOnUnlock(scoreUpdatedEvent -> {\r\n    // update something ...\r\n} );\r\n```\r\n\r\n#### 3.3 Trigger events ####\r\n\r\n**trigger simply**\r\n\r\nTrigger an event and increment its counter by one.\r\n\r\n```java\r\n@AchievementEventTrigger(name = \"myEvent\")\r\npublic void myMethod() {\r\n    // doesn't matter what the method do, only that it is called.\r\n}\r\n```\r\n\r\nequivalent with \r\n\r\n```java\r\nbadger.triggerEvent(\"myEvent\");\r\n```\r\n\r\n**Trigger with score**\r\n\r\nTrigger an event and set the counter score with parameter annotation\r\n\r\n```java\r\n@AchievementScore(counter = \"myEvent\")\r\npublic void myMethod(final @AchievementScoreParam Long newScore) {\r\n    // doesn't matter what the method do, only that it is called.\r\n}\r\n```\r\n\r\nor in case of other Object arguments by giving the score getter method\r\n\r\n```java\r\n// myObject.getMyScore(); - returns a Long\r\n\r\n@AchievementScore(counter = \"myEvent\")\r\npublic void myMethod(final @AchievementScoreParam(getter = \"getMyScore\") MyObject myObject) {\r\n    // doesn't matter what the method do, only that it is called.\r\n}\r\n```\r\n\r\nequivalent with \r\n\r\n```java\r\nfinal Long newScore = 100L; // the new score to be set\r\nbadger.triggerEvent(\"myEvent\", newScore);\r\n```\r\n\r\n#### 3.4 Unlock achievement directly ####\r\n\r\nUnlocked achievement directly by id. Optionally a trigger value will be stored only to provide information during unlock procedure.\r\n\r\n```java\r\n// unlock single achievement with id 'achievementId'\r\n@AchievementUnlock(achievement = \"achievementId\")\r\npublic void myMethod1() {\r\n    // doesn't matter what the method do, only that it is called.\r\n}\r\n\r\n// unlock single achievement with id 'achievementId' and provide unlock information\r\n@AchievementUnlock(achievement = \"achievementId\", triggerValue = \"special thing happened\")\r\npublic void myMethod2() {\r\n    // doesn't matter what the method do, only that it is called.\r\n}\r\n\r\n// unlock counter achievement with id 'achievementId' with value 10\r\n@AchievementUnlock(achievement = \"achievementId\", triggerValue = \"10\")\r\npublic void myMethod3() {\r\n    // doesn't matter what the method do, only that it is called.\r\n}\r\n\r\n// unlock date achievement with id 'achievementId' with date value of 30th of January\r\n@AchievementUnlock(achievement = \"achievementId\", triggerValue = \"01-30\")\r\npublic void myMethod4() {\r\n    // doesn't matter what the method do, only that it is called.\r\n}\r\n```\r\n\r\nequivalent with \r\n\r\n```java\r\n// unlock achievement with id 'achievementId'\r\nbadger.unlock(\"achievementId\");\r\n\r\n// unlock achievement with id 'achievementId' and provide unlock information\r\nbadger.unlock(\"achievementId\", \"special thing happened\");\r\n\r\n// unlock achievement with id 'achievementId' with value 10\r\nbadger.unlock(\"achievementId\", \"10\");\r\n\r\n// unlock achievement with id 'achievementId' with date value of 30th of January\r\nbadger.unlock(\"achievementId\", \"01-30\");\r\n```\r\n\r\n#### 3.5 Check for unlocked achievements ####\r\n\r\nAchievement check runs every time when an event is triggered. Nevertheless the checking can be done directly.\r\n\r\n```java\r\n@AchievementCheck\r\npublic void myMethod() {\r\n    // doesn't matter what the method do, only that it is called.\r\n}\r\n```\r\n\r\nequivalent with \r\n\r\n\r\n```java\r\nbadger.check();\r\n```\r\n\r\n# Enable annotation processing #\r\n\r\nTo enable annotation driven features make sure you use AspectJ veawing.\r\n\r\nHere is my maven example from my other project where I use BadgeR:\r\n\r\n```\r\n<plugin>\r\n    <groupId>org.codehaus.mojo</groupId>\r\n    <artifactId>aspectj-maven-plugin</artifactId>\r\n    <version>1.7</version>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjrt</artifactId>\r\n            <version>1.8.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjtools</artifactId>\r\n            <version>1.8.5</version>\r\n        </dependency>\r\n    </dependencies>\r\n    <executions>\r\n        <execution>\r\n            <phase>process-classes</phase>\r\n            <goals>\r\n                <goal>compile</goal>\r\n                <goal>test-compile</goal>  <!-- for testing -->\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n    <configuration>\r\n        <showWeaveInfo>false</showWeaveInfo>\r\n        <verbose>true</verbose>\r\n        <complianceLevel>1.8</complianceLevel>\r\n        <weaveDependencies>\r\n            <weaveDependency>\r\n                <groupId>net.csongradyp</groupId>\r\n                <artifactId>badger</artifactId>\r\n            </weaveDependency>\r\n        </weaveDependencies>\r\n        <aspectLibraries>\r\n            <dependency>\r\n                <groupId>org.aspectj</groupId>\r\n                <artifactId>aspectjrt</artifactId>\r\n            </dependency>\r\n        </aspectLibraries>\r\n        <source>1.8</source>\r\n        <target>1.8</target>\r\n    </configuration>\r\n</plugin>\r\n```\r\n\r\n\r\n## Author ##\r\n\r\n**Peter Csongrady**\r\n([csongrady.p@gmail.com](csongrady.p@gmail.com))\r\n\r\n[LinkedIn profile](hu.linkedin.com/in/csongradyp)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}